#lang racket

(define (repeated func n)
 (lambda (x)
   (if (= n 1)
      (func x)
      (func (repeated func (- n 1))))))
      
;((repeated inc 1) 5)
;((repeated inc 2) 5)

;(define (function1 arg0) (define (function2 arg1) <body>) function2)

(define (inc x) (+ x 1))
(define (rep f n) 
    (define (it x) 
        (if (= x 1)
            (f n)
            (f (it (- x 1))))) 
    it)
    

((rep inc 1) 5)
((rep inc 4) 5)



#|
ostart [3:38 PM]
2. Repeated application
Если f это численная функция, и n это положительное целое число, то мы можем сформировать n-ное применение функции f: это функция, чье значение для х равно f(f(...(f(x))...)).

Например, если f это функция x = x + 1, то n-ное применение функции f это x = x + n. Если f это операция возведения во вторую степень, то n-ное применение функции f это возведение в степень 2^n.

В файле repeated.rkt создайте процедуру, которая принимает в качестве аргумента другую процедуру (которая вычисляет f), и целое положительное число n; и возвращает процедуру, которая вычисляет n-ное применение функции f. В итоге вашу процедуру можно будет использовать следующим образом:

((repeated square 2) 5)
625
|#
